from django.test import TestCase
from django.utils.http import urlencode
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from cars.models import CarCategory
from cars import views

# Create your tests here.
class CarCategoryTests(APITestCase):
    """
    This method builds the URL and the data dictionary to compose and send
    an HTTP POST request to the view associated with the
    views.CarCategoryList.name name (carcategory-list) and returns the response
    generated by this request.
    """
    def post_car_category(self, name):
        url = reverse(views.CarCategoryList.name)
        data = {'name': name}
        response = self.client.post(url, data, format='json')
        return response
    
    def test_post_and_get_car_category(self):
        """
        Ensure we can create a new CarCategory and then retrieve it
        """
        new_car_category_name = 'Racing Bugs'
        response = self.post_car_category(new_car_category_name)
        print("PK {0}".format(CarCategory.objects.get().pk))
        assert response.status_code == status.HTTP_201_CREATED
        assert CarCategory.objects.count() == 1
        assert CarCategory.objects.get().name == new_car_category_name
        
    def test_post_existing_car_category_name(self):
        """
        Ensure we cannot create a CarCategory with an existing name
        """
        url = reverse(views.CarCategoryList.name)
        new_car_category_name = 'Racing Bugs'
        data = {'name': new_car_category_name}
        response1 = self.post_car_category(new_car_category_name)
        assert response1.status_code == status.HTTP_201_CREATED
        response2 = self.post_car_category(new_car_category_name)
        print(response2)
        assert response2.status_code == status.HTTP_400_BAD_REQUEST
        
    def test_filter_car_category_by_name(self):
        """
        Ensure we can filter a car category by name
        """
        car_category_name1 = 'Drag Racing'
        self.post_car_category(car_category_name1)
        #car_category_name2 = 'Sports car'
        #self.post_car_category(car_category_name2)
        filter_by_name = { 'name' : car_category_name1 }
        url = '{0}?{1}'.format(reverse(views.CarCategoryList.name),
                               urlencode(filter_by_name))
        print(url)
        response = self.client.get(url, format='json')
        print(response)
        assert response.status_code == status.HTTP_200_OK
        # Make sure we receive only one element in the response
        assert response.data['count'] == 1
        assert response.data['results'][0]['name'] == car_category_name1
        
        
    def test_get_car_categories_collection(self):
          """
          Ensure we can retrieve the car categories collection
          """
          new_car_category_name = 'Racing Bugs'
          self.post_car_category(new_car_category_name)
          url = reverse(views.CarCategoryList.name)
          response = self.client.get(url, format='json')
          assert response.status_code == status.HTTP_200_OK
          # Make sure we receive only one element in the response
          assert response.data['count'] == 1
          assert response.data['results'][0]['name'] == new_car_category_name
          
          
    def test_update_car_category(self):
        """
        Ensure we can update a single field for a car category
        """
        car_category_name = 'Racing Bugs'
        response = self.post_car_category(car_category_name)
        url = reverse(views.CarCategoryDetail.name, None, {response.data['pk']})
        updated_car_category_name = 'Racing Buggys'
        data = {'name': updated_car_category_name}
        patch_response = self.client.patch(url, data, format='json')
        assert patch_response.status_code == status.HTTP_200_OK
        assert patch_response.data['name'] == updated_car_category_name
        
    def test_get_car_category(self):
        """
        Ensure we can get a single car category by id
        """
        car_category_name = 'Racing Buggys'
        response = self.post_car_category(car_category_name)
        url = reverse(views.CarCategoryDetail.name, None, {response.data['pk']})
        get_response = self.client.get(url, format='json')
        assert get_response.status_code == status.HTTP_200_OK
        assert get_response.data['name'] == car_category_name


  
        